--- pchar-1.4/configure.in	Tue Jun  5 19:17:03 2001
+++ pchar-1.4.new/configure.in	Fri Jul 20 07:57:28 2001
@@ -28,10 +28,10 @@
 AC_MSG_CHECKING(echo functionality)
 if test "`echo "\\n"`" = '\n'; then
 	echoqnl='echo "\"\\n\""'
-        AC_MSG_RESULT "BSD-style"
+        AC_MSG_RESULT([ "BSD-style" ])
 else
 	echoqnl='echo "\"\\\n\""'
-        AC_MSG_RESULT "SysV-style"
+        AC_MSG_RESULT([ "SysV-style" ])
 fi
 AC_SUBST(echoqnl)
 
@@ -58,8 +58,38 @@
 AC_CHECK_HEADERS(unistd.h)
 AC_CHECK_HEADERS(strings.h)
 
-AC_LBL_SOCKADDR_SA_LEN
-AC_LBL_LIBRARY_NET
+AC_MSG_CHECKING(if sockaddr struct has sa_len member)
+AC_CACHE_VAL(ac_cv_lbl_sockaddr_has_sa_len,
+	AC_TRY_COMPILE([
+		#include <sys/types.h>
+		#include <sys/socket.h>],
+		[u_int i = sizeof(((struct sockaddr *)0)->sa_len)],
+		ac_cv_lbl_sockaddr_has_sa_len=yes,
+		ac_cv_lbl_sockaddr_has_sa_len=no))
+AC_MSG_RESULT($ac_cv_lbl_sockaddr_has_sa_len)
+if test $ac_cv_lbl_sockaddr_has_sa_len = yes ; then
+	AC_DEFINE(HAVE_SOCKADDR_SA_LEN)
+fi
+
+# Most operating systems have gethostbyname() in the default searched
+# libraries (i.e. libc):
+AC_CHECK_FUNC(gethostbyname, ,
+	# Some OSes (eg. Solaris) place it in libnsl:
+	AC_CHECK_LIB(nsl, gethostbyname, , 
+	    # Some strange OSes (SINIX) have it in libsocket:
+	    AC_CHECK_LIB(socket, gethostbyname, ,
+		# Unfortunately libsocket sometimes depends on libnsl.
+		# AC_CHECK_LIB's API is essentially broken so the
+		# following ugliness is necessary:
+		AC_CHECK_LIB(socket, gethostbyname,
+		    LIBS="-lsocket -lnsl $LIBS",
+		    AC_CHECK_LIB(resolv, gethostbyname),
+		    -lnsl))))
+AC_CHECK_FUNC(socket, , AC_CHECK_LIB(socket, socket, ,
+AC_CHECK_LIB(socket, socket, LIBS="-lsocket -lnsl $LIBS", ,
+	    -lnsl)))
+# DLPI needs putmsg under HPUX so test for -lstr while we're at it
+AC_CHECK_LIB(str, putmsg)
 
 dnl Checks for library functions.
 AC_CHECK_FUNCS(herror)
